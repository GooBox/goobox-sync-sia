/*
 * Copyright (C) 2017 Junpei Kawamoto
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'pmd'
apply plugin: 'findbugs'
//apply plugin: 'checkstyle'
apply plugin: "jacoco"
apply plugin: "com.github.hierynomus.license"

version = '0.0.12'
mainClassName = 'io.goobox.sync.sia.App'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1"
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://dl.bintray.com/goobox/maven"
    }
}

dependencies {
    compile 'io.swagger:swagger-annotations:1.5.15'
    compile 'com.squareup.okhttp:okhttp:2.7.5'
    compile 'com.squareup.okhttp:logging-interceptor:2.7.5'
    compile 'com.google.code.gson:gson:2.8.1'
    compile 'joda-time:joda-time:2.9.9'
    compile 'org.apache.commons:commons-lang3:3.7'
    compile 'commons-cli:commons-cli:1.4'
    compile 'commons-codec:commons-codec:1.4'
    compile 'commons-io:commons-io:2.6'
    compile 'org.dizitart:nitrite:2.0.1'
    compile 'net.harawata:appdirs:1.0.0'
    compile 'net.java.dev.jna:jna-platform:4.5.0'
    compile 'io.methvin:directory-watcher:0.3.1'
    compile 'org.apache.logging.log4j:log4j-api:2.9.1'
    compile 'org.apache.logging.log4j:log4j-core:2.9.1'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.9.1'
    compile 'com.intellij:annotations:12.0'
    compile 'io.goobox:goobox-sync-common:0.0.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.jmockit:jmockit:1.37'
    testCompile 'com.squareup.okhttp3:mockwebserver:3.9.1'
}

task packageTests(type: Jar) {
    from sourceSets.test.output
    classifier = 'tests'
}
artifacts.archives packageTests

task swagger(type: Exec) {
    description 'Generate a Swagger API client.'
    group 'build'
    executable 'sh'
    args 'codegen.sh'
}

run {
    if (project.hasProperty('args')) {
        args project.args.split('\\s+')
    }
}

test {
    jvmArgs "-Djdk.attach.allowAttachSelf"
}

def siaVersion = 'v1.3.1'
def siaArchives = [
        ['key': 'win64', 'value': 'windows-amd64'],
        ['key': 'linux', 'value': 'linux-amd64'],
        ['key': 'mac', 'value': 'darwin-amd64']
]

siaArchives.each { type ->

    Task download = tasks.create(name: "sia-$type.key") {
        description "Download SIA daemon for $type.key"
        group 'distribution'

        def sia = file("$buildDir/sia")
        def archive = sia.toPath().resolve("Sia-$siaVersion-${type.value}.zip")
        outputs.dir sia.toPath().resolve("Sia-$siaVersion-$type.value")
        doLast {
            sia.mkdirs()
            ant.get(src: "https://github.com/NebulousLabs/Sia/releases/download/$siaVersion/Sia-$siaVersion-${type.value}.zip", dest: archive)
            ant.unzip(src: archive, dest: sia, stripAbsolutePathSpec: true)
            sia.toPath().resolve("Sia-$siaVersion-${type.value}/siad").toFile().setExecutable(true)
        }
    }

    tasks.create(name: "distZip-$type.key", type: Zip, dependsOn: [test, installDist, startScripts, download]) {
        description "Bundles the project as a distribution for $type.key"
        group 'distribution'
        classifier = "$type.key"

        inputs.dir file("$buildDir/install")
        inputs.file file("$buildDir/sia/Sia-$siaVersion-${type.value}.zip")
        outputs.file file("$buildDir/distributions/goobox-sync-sia-$version-${type.key}.zio")

        into("$baseName-$version-$classifier") {
            from "$buildDir/install/$baseName"
        }

        into("$baseName-$version-$classifier/sia") {
            from "$buildDir/sia/Sia-$siaVersion-$type.value"
        }
    }

}

task distZip(overwrite: true, dependsOn: siaArchives.collect { "distZip-$it.key" }) {
    group 'distribution'

}

pmd {
    ignoreFailures = true
    ruleSets = [
            'java-braces',
            'java-codesize',
    ]
}

findbugs {
    ignoreFailures = true
}