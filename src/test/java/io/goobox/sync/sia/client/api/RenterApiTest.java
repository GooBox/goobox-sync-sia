/*
 * Sia
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3.3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.goobox.sync.sia.client.api;

import io.goobox.sync.sia.client.ApiException;
import io.goobox.sync.sia.client.api.model.InlineResponse20010;
import io.goobox.sync.sia.client.api.model.InlineResponse20011;
import io.goobox.sync.sia.client.api.model.InlineResponse20012;
import io.goobox.sync.sia.client.api.model.InlineResponse20013;
import io.goobox.sync.sia.client.api.model.InlineResponse2008;
import io.goobox.sync.sia.client.api.model.InlineResponse2009;
import org.junit.Ignore;
import org.junit.Test;

/**
 * API tests for RenterApi
 */
@Ignore
public class RenterApiTest {

    private final RenterApi api = new RenterApi();


    /**
     * returns active contracts. Expired contracts are not included.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renterContractsGetTest() throws ApiException {
        InlineResponse2009 response = api.renterContractsGet();

        // TODO: test validations
    }

    /**
     * deletes a renter file entry. Does not delete any downloads or original files, only the entry in the renter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renterDeleteSiapathPostTest() throws ApiException {
        String siapath = null;
        api.renterDeleteSiapathPost(siapath);

        // TODO: test validations
    }

    /**
     * downloads a file to the local filesystem. The call will block until the file has been downloaded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renterDownloadSiapathGetTest() throws ApiException {
        String siapath = null;
        String destination = null;
        Boolean async = null;
        Boolean httpresp = null;
        Long length = null;
        Long offset = null;
        api.renterDownloadSiapathGet(siapath, destination, async, httpresp, length, offset);

        // TODO: test validations
    }

    /**
     * downloads a file to the local filesystem. The call will return immediately.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renterDownloadasyncSiapathGetTest() throws ApiException {
        String siapath = null;
        String destination = null;
        api.renterDownloadasyncSiapathGet(siapath, destination);

        // TODO: test validations
    }

    /**
     * lists all files in the download queue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renterDownloadsGetTest() throws ApiException {
        InlineResponse20010 response = api.renterDownloadsGet();

        // TODO: test validations
    }

    /**
     * lists the status of specified file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renterFileSiapathGetTest() throws ApiException {
        String siapath = null;
        InlineResponse20011 response = api.renterFileSiapathGet(siapath);

        // TODO: test validations
    }

    /**
     * lists the status of all files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renterFilesGetTest() throws ApiException {
        InlineResponse20012 response = api.renterFilesGet();

        // TODO: test validations
    }

    /**
     * returns the current settings along with metrics on the renter&#39;s spending.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renterGetTest() throws ApiException {
        InlineResponse2008 response = api.renterGet();

        // TODO: test validations
    }

    /**
     * modify settings that control the renter&#39;s behavior.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renterPostTest() throws ApiException {
        String funds = null;
        Long hosts = null;
        Integer period = null;
        Long renewwindow = null;
        Long maxdownloadspeed = null;
        Long maxuploadspeed = null;
        Long streamcachesize = null;
        api.renterPost(funds, hosts, period, renewwindow, maxdownloadspeed, maxuploadspeed, streamcachesize);

        // TODO: test validations
    }

    /**
     * lists the estimated prices of performing various storage and data operations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renterPricesGetTest() throws ApiException {
        InlineResponse20013 response = api.renterPricesGet();

        // TODO: test validations
    }

    /**
     * renames a file. Does not rename any downloads or source files, only renames the entry in the renter. An error is returned if siapath does not exist or newsiapath already exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renterRenameSiapathPostTest() throws ApiException {
        String siapath = null;
        String newsiapath = null;
        api.renterRenameSiapathPost(siapath, newsiapath);

        // TODO: test validations
    }

    /**
     * downloads a file using http streaming. This call blocks until the data is received. The streaming endpoint also uses caching internally to prevent siad from redownloading the same chunk multiple times when only parts of a file are requested at once. This might lead to a substantial increase in ram usage and therefore it is not recommended to stream multiple files in parallel at the moment. This restriction will be removed together with the caching once partial downloads are supported in the future.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renterStreamSiapathGetTest() throws ApiException {
        String siapath = null;
        api.renterStreamSiapathGet(siapath);

        // TODO: test validations
    }

    /**
     * uploads a file to the network from the local filesystem.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renterUploadSiapathPostTest() throws ApiException {
        String siapath = null;
        String source = null;
        Long datapieces = null;
        Long paritypieces = null;
        api.renterUploadSiapathPost(siapath, source, datapieces, paritypieces);

        // TODO: test validations
    }

}
