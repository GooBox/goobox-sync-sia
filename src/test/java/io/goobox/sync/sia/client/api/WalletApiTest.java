/*
 * Sia
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.goobox.sync.sia.client.api;

import io.goobox.sync.sia.client.ApiException;
import io.goobox.sync.sia.client.api.model.InlineResponse20014;
import io.goobox.sync.sia.client.api.model.InlineResponse20015;
import io.goobox.sync.sia.client.api.model.InlineResponse20016;
import io.goobox.sync.sia.client.api.model.InlineResponse20017;
import io.goobox.sync.sia.client.api.model.InlineResponse20018;
import io.goobox.sync.sia.client.api.model.InlineResponse20019;
import io.goobox.sync.sia.client.api.model.InlineResponse20020;
import io.goobox.sync.sia.client.api.model.InlineResponse20021;
import io.goobox.sync.sia.client.api.model.InlineResponse20022;
import io.goobox.sync.sia.client.api.model.InlineResponse20023;
import io.goobox.sync.sia.client.api.model.InlineResponse20024;
import io.goobox.sync.sia.client.api.model.StandardError;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WalletApi
 */
@Ignore
public class WalletApiTest {

    private final WalletApi api = new WalletApi();

    
    /**
     * 
     *
     * loads a v0.3.3.x wallet into the current wallet, harvesting all of the secret keys. All spendable addresses in the loaded wallet will become spendable from the current wallet. An error will be returned if the given encryptionpassword is incorrect.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wallet033xPostTest() throws ApiException {
        String source = null;
        String encryptionpassword = null;
        api.wallet033xPost(source, encryptionpassword);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * gets a new address from the wallet generated by the primary seed. An error will be returned if the wallet is locked.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletAddressGetTest() throws ApiException {
        InlineResponse20015 response = api.walletAddressGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * fetches the list of addresses from the wallet.  If the wallet has not been created or unlocked, no addresses will be returned. After the wallet is unlocked, this call will continue to return its addresses  even after the wallet is locked again.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletAddressesGetTest() throws ApiException {
        InlineResponse20016 response = api.walletAddressesGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * creates a backup of the wallet settings file. Though this can easily be done manually, the settings file is often in an unknown or difficult to find location. The /wallet/backup call can spare users the trouble of needing to find their wallet file. The destination file is overwritten if it already exists.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletBackupGetTest() throws ApiException {
        String destination = null;
        api.walletBackupGet(destination);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * changes the wallet&#39;s encryption password.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletChangepasswordPostTest() throws ApiException {
        String encryptionpassword = null;
        String newpassword = null;
        api.walletChangepasswordPost(encryptionpassword, newpassword);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * returns basic information about the wallet,  such as whether the wallet is locked or unlocked.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletGetTest() throws ApiException {
        InlineResponse20014 response = api.walletGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * initializes the wallet. After the wallet has been initialized once, it does not need to be initialized again, and future calls to /wallet/init will return an error, unless the force flag is set. The encryption password is provided by the api call. If the password is blank, then the password will be set to the same as the seed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletInitPostTest() throws ApiException {
        String encryptionpassword = null;
        String dictionary = null;
        Boolean force = null;
        InlineResponse20017 response = api.walletInitPost(encryptionpassword, dictionary, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * initializes the wallet using a preexisting seed.  After the wallet has been initialized once, it does not need to be initialized again, and future calls to /wallet/init/seed will return an error unless the force flag is set. The encryption password is provided by the api call. If the password is blank, then the password will be set to the same as the seed. Note that loading a preexisting seed requires scanning the blockchain to determine how many keys have been generated from the seed. For this reason, /wallet/init/seed can only be called if the blockchain is synced.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletInitSeedPostTest() throws ApiException {
        String encryptionpassword = null;
        String seed = null;
        Boolean force = null;
        String dictionary = null;
        api.walletInitSeedPost(encryptionpassword, seed, force, dictionary);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * locks the wallet, wiping all secret keys. After being locked, the keys are encrypted. Queries for the seed, to send siafunds, and related queries become unavailable. Queries concerning transaction history and balance are still available.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletLockPostTest() throws ApiException {
        api.walletLockPost();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * gives the wallet a seed to track when looking for incoming transactions. The wallet will be able to spend outputs related to addresses created by the seed. The seed is added as an auxiliary seed, and does not replace the primary seed. Only the primary seed will be used for generating new addresses.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletSeedPostTest() throws ApiException {
        String encryptionpassword = null;
        String dictionary = null;
        String seed = null;
        api.walletSeedPost(encryptionpassword, dictionary, seed);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * returns a list of seeds in use by the wallet.  The primary seed is the only seed that gets used to generate new addresses. This call is unavailable when the wallet is locked. A seed is an encoded version of a 128 bit random seed. The output is 15 words chosen from a small dictionary as indicated by the input. The most common choice for the dictionary is going to be &#39;english&#39;. The underlying seed is the same no matter what dictionary is used for the encoding. The encoding also contains a small checksum of the seed,  to help catch simple mistakes when copying. The library entropy-mnemonics is used when encoding.      
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletSeedsGetTest() throws ApiException {
        String dictionary = null;
        InlineResponse20018 response = api.walletSeedsGet(dictionary);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Send siacoins to an address or set of addresses. The outputs are arbitrarily selected from addresses in the wallet. If &#39;outputs&#39; is supplied, &#39;amount&#39; and &#39;destination&#39; must be empty. The number of outputs should not exceed 400; this may result in a transaction too large to fit in the transaction pool.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletSiacoinsPostTest() throws ApiException {
        Integer amount = null;
        String destination = null;
        String outputs = null;
        InlineResponse20019 response = api.walletSiacoinsPost(amount, destination, outputs);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * sends siafunds to an address.  The outputs are arbitrarily selected from addresses in the wallet. Any siacoins available in the siafunds being sent (as well as the siacoins  available in any siafunds that end up in a refund address) will become  available to the wallet as siacoins after 144 confirmations.  To access all of the siacoins in the siacoin claim balance, send all of  the siafunds to an address in your control (this will give you all the  siacoins, while still letting you control the siafunds).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletSiafundsPostTest() throws ApiException {
        Integer amount = null;
        String destination = null;
        InlineResponse20019 response = api.walletSiafundsPost(amount, destination);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Load a key into the wallet that was generated by siag.  Most siafunds are currently in addresses created by siag.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletSiagkeyPostTest() throws ApiException {
        String encryptionpassword = null;
        String keyfiles = null;
        api.walletSiagkeyPost(encryptionpassword, keyfiles);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Scan the blockchain for outputs belonging to a seed and send them to an  address owned by the wallet.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletSweepSeedPostTest() throws ApiException {
        String dictionary = null;
        String seed = null;
        InlineResponse20020 response = api.walletSweepSeedPost(dictionary, seed);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * gets the transaction associated with a specific transaction id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletTransactionIdGetTest() throws ApiException {
        String id = null;
        InlineResponse20021 response = api.walletTransactionIdGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * returns all of the transactions related to a specific address.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletTransactionsAddrGetTest() throws ApiException {
        String addr = null;
        InlineResponse20023 response = api.walletTransactionsAddrGet(addr);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * returns a list of transactions related to the wallet.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletTransactionsGetTest() throws ApiException {
        String startheight = null;
        String endheight = null;
        InlineResponse20022 response = api.walletTransactionsGet(startheight, endheight);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * unlocks the wallet. The wallet is capable of knowing whether the correct password was provided.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletUnlockPostTest() throws ApiException {
        String encryptionpassword = null;
        api.walletUnlockPost(encryptionpassword);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * takes the address specified by addr and returns a JSON response indicating if the address is valid.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void walletVerifyAddressAddrGetTest() throws ApiException {
        String addr = null;
        InlineResponse20024 response = api.walletVerifyAddressAddrGet(addr);

        // TODO: test validations
    }
    
}
