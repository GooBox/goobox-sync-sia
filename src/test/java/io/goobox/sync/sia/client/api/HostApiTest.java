/*
 * Sia
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3.3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.goobox.sync.sia.client.api;

import io.goobox.sync.sia.client.ApiException;
import io.goobox.sync.sia.client.api.model.InlineResponse2004;
import io.goobox.sync.sia.client.api.model.InlineResponse2005;
import org.junit.Ignore;
import org.junit.Test;

/**
 * API tests for HostApi
 */
@Ignore
public class HostApiTest {

    private final HostApi api = new HostApi();


    /**
     * Announce the host to the network as a source of storage. Generally only needs to be called once.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostAnnouncePostTest() throws ApiException {
        String netaddress = null;
        api.hostAnnouncePost(netaddress);

        // TODO: test validations
    }

    /**
     * fetches status information about the host
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostGetTest() throws ApiException {
        InlineResponse2004 response = api.hostGet();

        // TODO: test validations
    }

    /**
     * configures hosting parameters. All parameters are optional; unspecified parameters will be left unchanged.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostPostTest() throws ApiException {
        Boolean acceptingcontracts = null;
        String maxdownloadbatchsize = null;
        String maxduration = null;
        String maxrevisebatchsize = null;
        String netaddress = null;
        String windowsize = null;
        String collateral = null;
        String collateralbudget = null;
        String maxcollateral = null;
        String mincontractprice = null;
        String mindownloadbandwidthprice = null;
        String minstorageprice = null;
        String minuploadbandwidthprice = null;
        api.hostPost(acceptingcontracts, maxdownloadbatchsize, maxduration, maxrevisebatchsize, netaddress, windowsize, collateral, collateralbudget, maxcollateral, mincontractprice, mindownloadbandwidthprice, minstorageprice, minuploadbandwidthprice);

        // TODO: test validations
    }

    /**
     * adds a storage folder to the manager. The manager may not check that there is enough space available on-disk to support as much storage as requested
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostStorageFoldersAddPostTest() throws ApiException {
        String path = null;
        Integer size = null;
        api.hostStorageFoldersAddPost(path, size);

        // TODO: test validations
    }

    /**
     * Remove a storage folder from the manager. All storage on the folder will be moved to other storage folders, meaning that no data will be lost. If the manager is unable to save data, an error will be returned and the operation will be stopped.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostStorageFoldersRemovePostTest() throws ApiException {
        String path = null;
        Boolean force = null;
        api.hostStorageFoldersRemovePost(path, force);

        // TODO: test validations
    }

    /**
     * grows or shrink a storage folder in the manager. The manager may not check that there is enough space on-disk to support growing the storage folder, but should gracefully handle running out of space unexpectedly. When shrinking a storage folder, any data in the folder that needs to be moved will be placed into other storage folders, meaning that no data will be lost. If the manager is unable to migrate the data, an error will be returned and the operation will be stopped.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostStorageFoldersResizePostTest() throws ApiException {
        String path = null;
        Integer newsize = null;
        api.hostStorageFoldersResizePost(path, newsize);

        // TODO: test validations
    }

    /**
     * gets a list of folders tracked by the host&#39;s storage manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostStorageGetTest() throws ApiException {
        InlineResponse2005 response = api.hostStorageGet();

        // TODO: test validations
    }

    /**
     * deletes a sector, meaning that the manager will be unable to upload that sector and be unable to provide a storage proof on that sector.  This endpoint is for removing the data entirely, and will remove instances of the sector appearing at all heights.  The primary purpose is to comply with legal requests to remove data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostStorageSectorsDeleteMerklerootPostTest() throws ApiException {
        String merkleroot = null;
        api.hostStorageSectorsDeleteMerklerootPost(merkleroot);

        // TODO: test validations
    }

}
