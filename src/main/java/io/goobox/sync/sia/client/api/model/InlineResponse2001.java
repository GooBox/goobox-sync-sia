/*
 * Sia
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3.7
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.goobox.sync.sia.client.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * InlineResponse2001
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-12-01T00:02:50.340-05:00")
public class InlineResponse2001 {
  @SerializedName("blockfrequency")
  private Integer blockfrequency = null;

  @SerializedName("blocksizelimit")
  private Integer blocksizelimit = null;

  @SerializedName("extremefuturethreshold")
  private Integer extremefuturethreshold = null;

  @SerializedName("futurethreshold")
  private Integer futurethreshold = null;

  @SerializedName("genesistimestamp")
  private Integer genesistimestamp = null;

  @SerializedName("initialcoinbase")
  private Integer initialcoinbase = null;

  @SerializedName("maturitydelay")
  private Integer maturitydelay = null;

  @SerializedName("maxadjustmentdown")
  private String maxadjustmentdown = null;

  @SerializedName("maxadjustmentup")
  private String maxadjustmentup = null;

  @SerializedName("mediantimestampwindow")
  private Integer mediantimestampwindow = null;

  @SerializedName("minimumcoinbase")
  private Integer minimumcoinbase = null;

  @SerializedName("rootdepth")
  private List<Integer> rootdepth = null;

  @SerializedName("roottarget")
  private List<Integer> roottarget = null;

  @SerializedName("siacoinprecision")
  private String siacoinprecision = null;

  @SerializedName("siafundcount")
  private Integer siafundcount = null;

  @SerializedName("siafundportion")
  private String siafundportion = null;

  @SerializedName("targetwindow")
  private Integer targetwindow = null;

  public InlineResponse2001 blockfrequency(Integer blockfrequency) {
    this.blockfrequency = blockfrequency;
    return this;
  }

   /**
   * Target for how frequently new blocks should be mined.
   * @return blockfrequency
  **/
  @ApiModelProperty(example = "600", value = "Target for how frequently new blocks should be mined.")
  public Integer getBlockfrequency() {
    return blockfrequency;
  }

  public void setBlockfrequency(Integer blockfrequency) {
    this.blockfrequency = blockfrequency;
  }

  public InlineResponse2001 blocksizelimit(Integer blocksizelimit) {
    this.blocksizelimit = blocksizelimit;
    return this;
  }

   /**
   * Maximum size, in bytes, of a block. Blocks larger than this will be rejected by peers. 
   * @return blocksizelimit
  **/
  @ApiModelProperty(example = "2000000", value = "Maximum size, in bytes, of a block. Blocks larger than this will be rejected by peers. ")
  public Integer getBlocksizelimit() {
    return blocksizelimit;
  }

  public void setBlocksizelimit(Integer blocksizelimit) {
    this.blocksizelimit = blocksizelimit;
  }

  public InlineResponse2001 extremefuturethreshold(Integer extremefuturethreshold) {
    this.extremefuturethreshold = extremefuturethreshold;
    return this;
  }

   /**
   * Farthest a block&#39;s timestamp can be in the future before the block is rejected outright. 
   * @return extremefuturethreshold
  **/
  @ApiModelProperty(example = "10800", value = "Farthest a block's timestamp can be in the future before the block is rejected outright. ")
  public Integer getExtremefuturethreshold() {
    return extremefuturethreshold;
  }

  public void setExtremefuturethreshold(Integer extremefuturethreshold) {
    this.extremefuturethreshold = extremefuturethreshold;
  }

  public InlineResponse2001 futurethreshold(Integer futurethreshold) {
    this.futurethreshold = futurethreshold;
    return this;
  }

   /**
   * How far in the future a block can be without being rejected. A block further into the future will not be accepted immediately, but the daemon will attempt to accept the block as soon as it is valid. 
   * @return futurethreshold
  **/
  @ApiModelProperty(example = "10800", value = "How far in the future a block can be without being rejected. A block further into the future will not be accepted immediately, but the daemon will attempt to accept the block as soon as it is valid. ")
  public Integer getFuturethreshold() {
    return futurethreshold;
  }

  public void setFuturethreshold(Integer futurethreshold) {
    this.futurethreshold = futurethreshold;
  }

  public InlineResponse2001 genesistimestamp(Integer genesistimestamp) {
    this.genesistimestamp = genesistimestamp;
    return this;
  }

   /**
   * Timestamp of the genesis block.
   * @return genesistimestamp
  **/
  @ApiModelProperty(example = "1433600000", value = "Timestamp of the genesis block.")
  public Integer getGenesistimestamp() {
    return genesistimestamp;
  }

  public void setGenesistimestamp(Integer genesistimestamp) {
    this.genesistimestamp = genesistimestamp;
  }

  public InlineResponse2001 initialcoinbase(Integer initialcoinbase) {
    this.initialcoinbase = initialcoinbase;
    return this;
  }

   /**
   * Number of coins given to the miner of the first block. Note that elsewhere in the API currency is typically returned in hastings and as a bignum. This is not the case here. 
   * @return initialcoinbase
  **/
  @ApiModelProperty(example = "300000", value = "Number of coins given to the miner of the first block. Note that elsewhere in the API currency is typically returned in hastings and as a bignum. This is not the case here. ")
  public Integer getInitialcoinbase() {
    return initialcoinbase;
  }

  public void setInitialcoinbase(Integer initialcoinbase) {
    this.initialcoinbase = initialcoinbase;
  }

  public InlineResponse2001 maturitydelay(Integer maturitydelay) {
    this.maturitydelay = maturitydelay;
    return this;
  }

   /**
   * Number of children a block must have before it is considered \&quot;mature.\&quot; 
   * @return maturitydelay
  **/
  @ApiModelProperty(example = "144", value = "Number of children a block must have before it is considered \"mature.\" ")
  public Integer getMaturitydelay() {
    return maturitydelay;
  }

  public void setMaturitydelay(Integer maturitydelay) {
    this.maturitydelay = maturitydelay;
  }

  public InlineResponse2001 maxadjustmentdown(String maxadjustmentdown) {
    this.maxadjustmentdown = maxadjustmentdown;
    return this;
  }

   /**
   * Smallest allowed ratio between the old difficulty and the new difficulty.
   * @return maxadjustmentdown
  **/
  @ApiModelProperty(example = "2/5", value = "Smallest allowed ratio between the old difficulty and the new difficulty.")
  public String getMaxadjustmentdown() {
    return maxadjustmentdown;
  }

  public void setMaxadjustmentdown(String maxadjustmentdown) {
    this.maxadjustmentdown = maxadjustmentdown;
  }

  public InlineResponse2001 maxadjustmentup(String maxadjustmentup) {
    this.maxadjustmentup = maxadjustmentup;
    return this;
  }

   /**
   * Largest allowed ratio between the old difficulty and the new difficulty.
   * @return maxadjustmentup
  **/
  @ApiModelProperty(example = "5/2", value = "Largest allowed ratio between the old difficulty and the new difficulty.")
  public String getMaxadjustmentup() {
    return maxadjustmentup;
  }

  public void setMaxadjustmentup(String maxadjustmentup) {
    this.maxadjustmentup = maxadjustmentup;
  }

  public InlineResponse2001 mediantimestampwindow(Integer mediantimestampwindow) {
    this.mediantimestampwindow = mediantimestampwindow;
    return this;
  }

   /**
   * Duration of the window used to adjust the difficulty.
   * @return mediantimestampwindow
  **/
  @ApiModelProperty(example = "11", value = "Duration of the window used to adjust the difficulty.")
  public Integer getMediantimestampwindow() {
    return mediantimestampwindow;
  }

  public void setMediantimestampwindow(Integer mediantimestampwindow) {
    this.mediantimestampwindow = mediantimestampwindow;
  }

  public InlineResponse2001 minimumcoinbase(Integer minimumcoinbase) {
    this.minimumcoinbase = minimumcoinbase;
    return this;
  }

   /**
   * Minimum number of coins paid out to the miner of a block (the coinbase decreases with each block). Note that elsewhere in the API currency is typically returned in hastings and as a bignum. This is not the case here. 
   * @return minimumcoinbase
  **/
  @ApiModelProperty(example = "30000", value = "Minimum number of coins paid out to the miner of a block (the coinbase decreases with each block). Note that elsewhere in the API currency is typically returned in hastings and as a bignum. This is not the case here. ")
  public Integer getMinimumcoinbase() {
    return minimumcoinbase;
  }

  public void setMinimumcoinbase(Integer minimumcoinbase) {
    this.minimumcoinbase = minimumcoinbase;
  }

  public InlineResponse2001 rootdepth(List<Integer> rootdepth) {
    this.rootdepth = rootdepth;
    return this;
  }

  public InlineResponse2001 addRootdepthItem(Integer rootdepthItem) {
    if (this.rootdepth == null) {
      this.rootdepth = new ArrayList<Integer>();
    }
    this.rootdepth.add(rootdepthItem);
    return this;
  }

   /**
   * Initial depth
   * @return rootdepth
  **/
  @ApiModelProperty(value = "Initial depth")
  public List<Integer> getRootdepth() {
    return rootdepth;
  }

  public void setRootdepth(List<Integer> rootdepth) {
    this.rootdepth = rootdepth;
  }

  public InlineResponse2001 roottarget(List<Integer> roottarget) {
    this.roottarget = roottarget;
    return this;
  }

  public InlineResponse2001 addRoottargetItem(Integer roottargetItem) {
    if (this.roottarget == null) {
      this.roottarget = new ArrayList<Integer>();
    }
    this.roottarget.add(roottargetItem);
    return this;
  }

   /**
   * Initial target
   * @return roottarget
  **/
  @ApiModelProperty(value = "Initial target")
  public List<Integer> getRoottarget() {
    return roottarget;
  }

  public void setRoottarget(List<Integer> roottarget) {
    this.roottarget = roottarget;
  }

  public InlineResponse2001 siacoinprecision(String siacoinprecision) {
    this.siacoinprecision = siacoinprecision;
    return this;
  }

   /**
   * Number of Hastings in one siacoin.
   * @return siacoinprecision
  **/
  @ApiModelProperty(example = "1e+24", value = "Number of Hastings in one siacoin.")
  public String getSiacoinprecision() {
    return siacoinprecision;
  }

  public void setSiacoinprecision(String siacoinprecision) {
    this.siacoinprecision = siacoinprecision;
  }

  public InlineResponse2001 siafundcount(Integer siafundcount) {
    this.siafundcount = siafundcount;
    return this;
  }

   /**
   * Total number of siafunds.
   * @return siafundcount
  **/
  @ApiModelProperty(example = "10000", value = "Total number of siafunds.")
  public Integer getSiafundcount() {
    return siafundcount;
  }

  public void setSiafundcount(Integer siafundcount) {
    this.siafundcount = siafundcount;
  }

  public InlineResponse2001 siafundportion(String siafundportion) {
    this.siafundportion = siafundportion;
    return this;
  }

   /**
   * Fraction of each file contract payout given to siafund holders.
   * @return siafundportion
  **/
  @ApiModelProperty(example = "39/1000", value = "Fraction of each file contract payout given to siafund holders.")
  public String getSiafundportion() {
    return siafundportion;
  }

  public void setSiafundportion(String siafundportion) {
    this.siafundportion = siafundportion;
  }

  public InlineResponse2001 targetwindow(Integer targetwindow) {
    this.targetwindow = targetwindow;
    return this;
  }

   /**
   * Height of the window used to adjust the difficulty.
   * @return targetwindow
  **/
  @ApiModelProperty(example = "1000", value = "Height of the window used to adjust the difficulty.")
  public Integer getTargetwindow() {
    return targetwindow;
  }

  public void setTargetwindow(Integer targetwindow) {
    this.targetwindow = targetwindow;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2001 inlineResponse2001 = (InlineResponse2001) o;
    return Objects.equals(this.blockfrequency, inlineResponse2001.blockfrequency) &&
        Objects.equals(this.blocksizelimit, inlineResponse2001.blocksizelimit) &&
        Objects.equals(this.extremefuturethreshold, inlineResponse2001.extremefuturethreshold) &&
        Objects.equals(this.futurethreshold, inlineResponse2001.futurethreshold) &&
        Objects.equals(this.genesistimestamp, inlineResponse2001.genesistimestamp) &&
        Objects.equals(this.initialcoinbase, inlineResponse2001.initialcoinbase) &&
        Objects.equals(this.maturitydelay, inlineResponse2001.maturitydelay) &&
        Objects.equals(this.maxadjustmentdown, inlineResponse2001.maxadjustmentdown) &&
        Objects.equals(this.maxadjustmentup, inlineResponse2001.maxadjustmentup) &&
        Objects.equals(this.mediantimestampwindow, inlineResponse2001.mediantimestampwindow) &&
        Objects.equals(this.minimumcoinbase, inlineResponse2001.minimumcoinbase) &&
        Objects.equals(this.rootdepth, inlineResponse2001.rootdepth) &&
        Objects.equals(this.roottarget, inlineResponse2001.roottarget) &&
        Objects.equals(this.siacoinprecision, inlineResponse2001.siacoinprecision) &&
        Objects.equals(this.siafundcount, inlineResponse2001.siafundcount) &&
        Objects.equals(this.siafundportion, inlineResponse2001.siafundportion) &&
        Objects.equals(this.targetwindow, inlineResponse2001.targetwindow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockfrequency, blocksizelimit, extremefuturethreshold, futurethreshold, genesistimestamp, initialcoinbase, maturitydelay, maxadjustmentdown, maxadjustmentup, mediantimestampwindow, minimumcoinbase, rootdepth, roottarget, siacoinprecision, siafundcount, siafundportion, targetwindow);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2001 {\n");
    
    sb.append("    blockfrequency: ").append(toIndentedString(blockfrequency)).append("\n");
    sb.append("    blocksizelimit: ").append(toIndentedString(blocksizelimit)).append("\n");
    sb.append("    extremefuturethreshold: ").append(toIndentedString(extremefuturethreshold)).append("\n");
    sb.append("    futurethreshold: ").append(toIndentedString(futurethreshold)).append("\n");
    sb.append("    genesistimestamp: ").append(toIndentedString(genesistimestamp)).append("\n");
    sb.append("    initialcoinbase: ").append(toIndentedString(initialcoinbase)).append("\n");
    sb.append("    maturitydelay: ").append(toIndentedString(maturitydelay)).append("\n");
    sb.append("    maxadjustmentdown: ").append(toIndentedString(maxadjustmentdown)).append("\n");
    sb.append("    maxadjustmentup: ").append(toIndentedString(maxadjustmentup)).append("\n");
    sb.append("    mediantimestampwindow: ").append(toIndentedString(mediantimestampwindow)).append("\n");
    sb.append("    minimumcoinbase: ").append(toIndentedString(minimumcoinbase)).append("\n");
    sb.append("    rootdepth: ").append(toIndentedString(rootdepth)).append("\n");
    sb.append("    roottarget: ").append(toIndentedString(roottarget)).append("\n");
    sb.append("    siacoinprecision: ").append(toIndentedString(siacoinprecision)).append("\n");
    sb.append("    siafundcount: ").append(toIndentedString(siafundcount)).append("\n");
    sb.append("    siafundportion: ").append(toIndentedString(siafundportion)).append("\n");
    sb.append("    targetwindow: ").append(toIndentedString(targetwindow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

