/*
 * Sia
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.goobox.sync.sia.client.api;

import io.goobox.sync.sia.client.ApiCallback;
import io.goobox.sync.sia.client.ApiClient;
import io.goobox.sync.sia.client.ApiException;
import io.goobox.sync.sia.client.ApiResponse;
import io.goobox.sync.sia.client.Configuration;
import io.goobox.sync.sia.client.Pair;
import io.goobox.sync.sia.client.ProgressRequestBody;
import io.goobox.sync.sia.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.goobox.sync.sia.client.api.model.InlineResponse20010;
import io.goobox.sync.sia.client.api.model.InlineResponse20011;
import io.goobox.sync.sia.client.api.model.InlineResponse20012;
import io.goobox.sync.sia.client.api.model.InlineResponse20013;
import io.goobox.sync.sia.client.api.model.InlineResponse2008;
import io.goobox.sync.sia.client.api.model.InlineResponse2009;
import io.goobox.sync.sia.client.api.model.StandardError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RenterApi {
    private ApiClient apiClient;

    public RenterApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RenterApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for renterContractsGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renterContractsGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/renter/contracts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renterContractsGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = renterContractsGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * returns active contracts. Expired contracts are not included.
     * @return InlineResponse2009
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2009 renterContractsGet() throws ApiException {
        ApiResponse<InlineResponse2009> resp = renterContractsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * returns active contracts. Expired contracts are not included.
     * @return ApiResponse&lt;InlineResponse2009&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2009> renterContractsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = renterContractsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * returns active contracts. Expired contracts are not included.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call renterContractsGetAsync(final ApiCallback<InlineResponse2009> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renterContractsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for renterDeleteSiapathPost
     * @param siapath Location of the file in the renter on the network. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renterDeleteSiapathPostCall(String siapath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/renter/delete/{siapath}"
            .replaceAll("\\{" + "siapath" + "\\}", apiClient.escapeString(siapath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renterDeleteSiapathPostValidateBeforeCall(String siapath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siapath' is set
        if (siapath == null) {
            throw new ApiException("Missing the required parameter 'siapath' when calling renterDeleteSiapathPost(Async)");
        }
        

        com.squareup.okhttp.Call call = renterDeleteSiapathPostCall(siapath, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * deletes a renter file entry. Does not delete any downloads or original files, only the entry in the renter.
     * @param siapath Location of the file in the renter on the network. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void renterDeleteSiapathPost(String siapath) throws ApiException {
        renterDeleteSiapathPostWithHttpInfo(siapath);
    }

    /**
     * 
     * deletes a renter file entry. Does not delete any downloads or original files, only the entry in the renter.
     * @param siapath Location of the file in the renter on the network. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> renterDeleteSiapathPostWithHttpInfo(String siapath) throws ApiException {
        com.squareup.okhttp.Call call = renterDeleteSiapathPostValidateBeforeCall(siapath, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * deletes a renter file entry. Does not delete any downloads or original files, only the entry in the renter.
     * @param siapath Location of the file in the renter on the network. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call renterDeleteSiapathPostAsync(String siapath, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renterDeleteSiapathPostValidateBeforeCall(siapath, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for renterDownloadSiapathGet
     * @param siapath Location of the file in the renter on the network. (required)
     * @param destination Location on disk that the file will be downloaded to. (required)
     * @param async If async is true, the http request will be non blocking. Can&#39;t be used with (optional)
     * @param httpresp If httresp is true, the data will be written to the http response. (optional)
     * @param length Length of the requested data. Has to be &lt;&#x3D; filesize-offset. (optional)
     * @param offset Offset relative to the file start from where the download starts. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renterDownloadSiapathGetCall(String siapath, String destination, Boolean async, Boolean httpresp, Long length, Long offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/renter/download/{siapath}"
            .replaceAll("\\{" + "siapath" + "\\}", apiClient.escapeString(siapath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (async != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("async", async));
        if (destination != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destination", destination));
        if (httpresp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("httpresp", httpresp));
        if (length != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("length", length));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renterDownloadSiapathGetValidateBeforeCall(String siapath, String destination, Boolean async, Boolean httpresp, Long length, Long offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siapath' is set
        if (siapath == null) {
            throw new ApiException("Missing the required parameter 'siapath' when calling renterDownloadSiapathGet(Async)");
        }
        
        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException("Missing the required parameter 'destination' when calling renterDownloadSiapathGet(Async)");
        }
        

        com.squareup.okhttp.Call call = renterDownloadSiapathGetCall(siapath, destination, async, httpresp, length, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * downloads a file to the local filesystem. The call will block until the file has been downloaded.
     * @param siapath Location of the file in the renter on the network. (required)
     * @param destination Location on disk that the file will be downloaded to. (required)
     * @param async If async is true, the http request will be non blocking. Can&#39;t be used with (optional)
     * @param httpresp If httresp is true, the data will be written to the http response. (optional)
     * @param length Length of the requested data. Has to be &lt;&#x3D; filesize-offset. (optional)
     * @param offset Offset relative to the file start from where the download starts. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void renterDownloadSiapathGet(String siapath, String destination, Boolean async, Boolean httpresp, Long length, Long offset) throws ApiException {
        renterDownloadSiapathGetWithHttpInfo(siapath, destination, async, httpresp, length, offset);
    }

    /**
     * 
     * downloads a file to the local filesystem. The call will block until the file has been downloaded.
     * @param siapath Location of the file in the renter on the network. (required)
     * @param destination Location on disk that the file will be downloaded to. (required)
     * @param async If async is true, the http request will be non blocking. Can&#39;t be used with (optional)
     * @param httpresp If httresp is true, the data will be written to the http response. (optional)
     * @param length Length of the requested data. Has to be &lt;&#x3D; filesize-offset. (optional)
     * @param offset Offset relative to the file start from where the download starts. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> renterDownloadSiapathGetWithHttpInfo(String siapath, String destination, Boolean async, Boolean httpresp, Long length, Long offset) throws ApiException {
        com.squareup.okhttp.Call call = renterDownloadSiapathGetValidateBeforeCall(siapath, destination, async, httpresp, length, offset, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * downloads a file to the local filesystem. The call will block until the file has been downloaded.
     * @param siapath Location of the file in the renter on the network. (required)
     * @param destination Location on disk that the file will be downloaded to. (required)
     * @param async If async is true, the http request will be non blocking. Can&#39;t be used with (optional)
     * @param httpresp If httresp is true, the data will be written to the http response. (optional)
     * @param length Length of the requested data. Has to be &lt;&#x3D; filesize-offset. (optional)
     * @param offset Offset relative to the file start from where the download starts. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call renterDownloadSiapathGetAsync(String siapath, String destination, Boolean async, Boolean httpresp, Long length, Long offset, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renterDownloadSiapathGetValidateBeforeCall(siapath, destination, async, httpresp, length, offset, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for renterDownloadasyncSiapathGet
     * @param siapath Location of the file in the renter on the network. (required)
     * @param destination Location on disk that the file will be downloaded to. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renterDownloadasyncSiapathGetCall(String siapath, String destination, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/renter/downloadasync/{siapath}"
            .replaceAll("\\{" + "siapath" + "\\}", apiClient.escapeString(siapath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (destination != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destination", destination));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renterDownloadasyncSiapathGetValidateBeforeCall(String siapath, String destination, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siapath' is set
        if (siapath == null) {
            throw new ApiException("Missing the required parameter 'siapath' when calling renterDownloadasyncSiapathGet(Async)");
        }
        
        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException("Missing the required parameter 'destination' when calling renterDownloadasyncSiapathGet(Async)");
        }
        

        com.squareup.okhttp.Call call = renterDownloadasyncSiapathGetCall(siapath, destination, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * downloads a file to the local filesystem. The call will return immediately.
     * @param siapath Location of the file in the renter on the network. (required)
     * @param destination Location on disk that the file will be downloaded to. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void renterDownloadasyncSiapathGet(String siapath, String destination) throws ApiException {
        renterDownloadasyncSiapathGetWithHttpInfo(siapath, destination);
    }

    /**
     * 
     * downloads a file to the local filesystem. The call will return immediately.
     * @param siapath Location of the file in the renter on the network. (required)
     * @param destination Location on disk that the file will be downloaded to. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> renterDownloadasyncSiapathGetWithHttpInfo(String siapath, String destination) throws ApiException {
        com.squareup.okhttp.Call call = renterDownloadasyncSiapathGetValidateBeforeCall(siapath, destination, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * downloads a file to the local filesystem. The call will return immediately.
     * @param siapath Location of the file in the renter on the network. (required)
     * @param destination Location on disk that the file will be downloaded to. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call renterDownloadasyncSiapathGetAsync(String siapath, String destination, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renterDownloadasyncSiapathGetValidateBeforeCall(siapath, destination, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for renterDownloadsGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renterDownloadsGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/renter/downloads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renterDownloadsGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = renterDownloadsGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * lists all files in the download queue.
     * @return InlineResponse20010
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20010 renterDownloadsGet() throws ApiException {
        ApiResponse<InlineResponse20010> resp = renterDownloadsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * lists all files in the download queue.
     * @return ApiResponse&lt;InlineResponse20010&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20010> renterDownloadsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = renterDownloadsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20010>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * lists all files in the download queue.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call renterDownloadsGetAsync(final ApiCallback<InlineResponse20010> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renterDownloadsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20010>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for renterFileSiapathGet
     * @param siapath Location of the file in the renter on the network. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renterFileSiapathGetCall(String siapath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/renter/file/{siapath}"
            .replaceAll("\\{" + "siapath" + "\\}", apiClient.escapeString(siapath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renterFileSiapathGetValidateBeforeCall(String siapath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siapath' is set
        if (siapath == null) {
            throw new ApiException("Missing the required parameter 'siapath' when calling renterFileSiapathGet(Async)");
        }
        

        com.squareup.okhttp.Call call = renterFileSiapathGetCall(siapath, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * lists the status of specified file.
     * @param siapath Location of the file in the renter on the network. (required)
     * @return InlineResponse20012
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20012 renterFileSiapathGet(String siapath) throws ApiException {
        ApiResponse<InlineResponse20012> resp = renterFileSiapathGetWithHttpInfo(siapath);
        return resp.getData();
    }

    /**
     * 
     * lists the status of specified file.
     * @param siapath Location of the file in the renter on the network. (required)
     * @return ApiResponse&lt;InlineResponse20012&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20012> renterFileSiapathGetWithHttpInfo(String siapath) throws ApiException {
        com.squareup.okhttp.Call call = renterFileSiapathGetValidateBeforeCall(siapath, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20012>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * lists the status of specified file.
     * @param siapath Location of the file in the renter on the network. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call renterFileSiapathGetAsync(String siapath, final ApiCallback<InlineResponse20012> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renterFileSiapathGetValidateBeforeCall(siapath, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20012>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for renterFilesGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renterFilesGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/renter/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renterFilesGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = renterFilesGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * lists the status of all files.
     * @return InlineResponse20011
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20011 renterFilesGet() throws ApiException {
        ApiResponse<InlineResponse20011> resp = renterFilesGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * lists the status of all files.
     * @return ApiResponse&lt;InlineResponse20011&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20011> renterFilesGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = renterFilesGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20011>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * lists the status of all files.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call renterFilesGetAsync(final ApiCallback<InlineResponse20011> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renterFilesGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20011>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for renterGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renterGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/renter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renterGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = renterGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * returns the current settings along with metrics on the renter&#39;s spending.
     * @return InlineResponse2008
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2008 renterGet() throws ApiException {
        ApiResponse<InlineResponse2008> resp = renterGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * returns the current settings along with metrics on the renter&#39;s spending.
     * @return ApiResponse&lt;InlineResponse2008&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2008> renterGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = renterGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * returns the current settings along with metrics on the renter&#39;s spending.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call renterGetAsync(final ApiCallback<InlineResponse2008> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renterGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for renterPost
     * @param funds Number of hastings allocated for file contracts in the given period. (optional)
     * @param hosts Number of hosts that contracts should be formed with. Files cannot be uploaded to more hosts than you have contracts with, and it&#39;s generally good to form a few more contracts than you need. (optional)
     * @param period Duration of contracts formed. Must be nonzero. (optional)
     * @param renewwindow Renew window specifies how many blocks before the expiration of the current contracts the renter will wait before renewing the contracts. A smaller renew window means that Sia must be run more frequently, but also means fewer total transaction fees. Storage spending is not affected by the renew window size. (optional)
     * @param maxdownloadspeed Max download speed permitted, speed provide in bytes per second. (optional)
     * @param maxuploadspeed Max upload speed permitted, speed provide in bytes per second (optional)
     * @param streamcachesize Stream cache size specifies how many data chunks will be cached while  streaming.   (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renterPostCall(String funds, Long hosts, Integer period, Long renewwindow, Long maxdownloadspeed, Long maxuploadspeed, Long streamcachesize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/renter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (funds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("funds", funds));
        if (hosts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hosts", hosts));
        if (period != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("period", period));
        if (renewwindow != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("renewwindow", renewwindow));
        if (maxdownloadspeed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxdownloadspeed", maxdownloadspeed));
        if (maxuploadspeed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxuploadspeed", maxuploadspeed));
        if (streamcachesize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("streamcachesize", streamcachesize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renterPostValidateBeforeCall(String funds, Long hosts, Integer period, Long renewwindow, Long maxdownloadspeed, Long maxuploadspeed, Long streamcachesize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = renterPostCall(funds, hosts, period, renewwindow, maxdownloadspeed, maxuploadspeed, streamcachesize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * modify settings that control the renter&#39;s behavior.
     * @param funds Number of hastings allocated for file contracts in the given period. (optional)
     * @param hosts Number of hosts that contracts should be formed with. Files cannot be uploaded to more hosts than you have contracts with, and it&#39;s generally good to form a few more contracts than you need. (optional)
     * @param period Duration of contracts formed. Must be nonzero. (optional)
     * @param renewwindow Renew window specifies how many blocks before the expiration of the current contracts the renter will wait before renewing the contracts. A smaller renew window means that Sia must be run more frequently, but also means fewer total transaction fees. Storage spending is not affected by the renew window size. (optional)
     * @param maxdownloadspeed Max download speed permitted, speed provide in bytes per second. (optional)
     * @param maxuploadspeed Max upload speed permitted, speed provide in bytes per second (optional)
     * @param streamcachesize Stream cache size specifies how many data chunks will be cached while  streaming.   (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void renterPost(String funds, Long hosts, Integer period, Long renewwindow, Long maxdownloadspeed, Long maxuploadspeed, Long streamcachesize) throws ApiException {
        renterPostWithHttpInfo(funds, hosts, period, renewwindow, maxdownloadspeed, maxuploadspeed, streamcachesize);
    }

    /**
     * 
     * modify settings that control the renter&#39;s behavior.
     * @param funds Number of hastings allocated for file contracts in the given period. (optional)
     * @param hosts Number of hosts that contracts should be formed with. Files cannot be uploaded to more hosts than you have contracts with, and it&#39;s generally good to form a few more contracts than you need. (optional)
     * @param period Duration of contracts formed. Must be nonzero. (optional)
     * @param renewwindow Renew window specifies how many blocks before the expiration of the current contracts the renter will wait before renewing the contracts. A smaller renew window means that Sia must be run more frequently, but also means fewer total transaction fees. Storage spending is not affected by the renew window size. (optional)
     * @param maxdownloadspeed Max download speed permitted, speed provide in bytes per second. (optional)
     * @param maxuploadspeed Max upload speed permitted, speed provide in bytes per second (optional)
     * @param streamcachesize Stream cache size specifies how many data chunks will be cached while  streaming.   (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> renterPostWithHttpInfo(String funds, Long hosts, Integer period, Long renewwindow, Long maxdownloadspeed, Long maxuploadspeed, Long streamcachesize) throws ApiException {
        com.squareup.okhttp.Call call = renterPostValidateBeforeCall(funds, hosts, period, renewwindow, maxdownloadspeed, maxuploadspeed, streamcachesize, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * modify settings that control the renter&#39;s behavior.
     * @param funds Number of hastings allocated for file contracts in the given period. (optional)
     * @param hosts Number of hosts that contracts should be formed with. Files cannot be uploaded to more hosts than you have contracts with, and it&#39;s generally good to form a few more contracts than you need. (optional)
     * @param period Duration of contracts formed. Must be nonzero. (optional)
     * @param renewwindow Renew window specifies how many blocks before the expiration of the current contracts the renter will wait before renewing the contracts. A smaller renew window means that Sia must be run more frequently, but also means fewer total transaction fees. Storage spending is not affected by the renew window size. (optional)
     * @param maxdownloadspeed Max download speed permitted, speed provide in bytes per second. (optional)
     * @param maxuploadspeed Max upload speed permitted, speed provide in bytes per second (optional)
     * @param streamcachesize Stream cache size specifies how many data chunks will be cached while  streaming.   (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call renterPostAsync(String funds, Long hosts, Integer period, Long renewwindow, Long maxdownloadspeed, Long maxuploadspeed, Long streamcachesize, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renterPostValidateBeforeCall(funds, hosts, period, renewwindow, maxdownloadspeed, maxuploadspeed, streamcachesize, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for renterPricesGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renterPricesGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/renter/prices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renterPricesGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = renterPricesGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * lists the estimated prices of performing various storage and data operations.
     * @return InlineResponse20013
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20013 renterPricesGet() throws ApiException {
        ApiResponse<InlineResponse20013> resp = renterPricesGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * lists the estimated prices of performing various storage and data operations.
     * @return ApiResponse&lt;InlineResponse20013&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20013> renterPricesGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = renterPricesGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20013>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * lists the estimated prices of performing various storage and data operations.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call renterPricesGetAsync(final ApiCallback<InlineResponse20013> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renterPricesGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20013>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for renterRenameSiapathPost
     * @param siapath Location of the file in the renter on the network. (required)
     * @param newsiapath New location of the file in the renter on the network. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renterRenameSiapathPostCall(String siapath, String newsiapath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/renter/rename/{siapath}"
            .replaceAll("\\{" + "siapath" + "\\}", apiClient.escapeString(siapath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (newsiapath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newsiapath", newsiapath));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renterRenameSiapathPostValidateBeforeCall(String siapath, String newsiapath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siapath' is set
        if (siapath == null) {
            throw new ApiException("Missing the required parameter 'siapath' when calling renterRenameSiapathPost(Async)");
        }
        
        // verify the required parameter 'newsiapath' is set
        if (newsiapath == null) {
            throw new ApiException("Missing the required parameter 'newsiapath' when calling renterRenameSiapathPost(Async)");
        }
        

        com.squareup.okhttp.Call call = renterRenameSiapathPostCall(siapath, newsiapath, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * renames a file. Does not rename any downloads or source files, only renames the entry in the renter. An error is returned if siapath does not exist or newsiapath already exists.
     * @param siapath Location of the file in the renter on the network. (required)
     * @param newsiapath New location of the file in the renter on the network. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void renterRenameSiapathPost(String siapath, String newsiapath) throws ApiException {
        renterRenameSiapathPostWithHttpInfo(siapath, newsiapath);
    }

    /**
     * 
     * renames a file. Does not rename any downloads or source files, only renames the entry in the renter. An error is returned if siapath does not exist or newsiapath already exists.
     * @param siapath Location of the file in the renter on the network. (required)
     * @param newsiapath New location of the file in the renter on the network. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> renterRenameSiapathPostWithHttpInfo(String siapath, String newsiapath) throws ApiException {
        com.squareup.okhttp.Call call = renterRenameSiapathPostValidateBeforeCall(siapath, newsiapath, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * renames a file. Does not rename any downloads or source files, only renames the entry in the renter. An error is returned if siapath does not exist or newsiapath already exists.
     * @param siapath Location of the file in the renter on the network. (required)
     * @param newsiapath New location of the file in the renter on the network. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call renterRenameSiapathPostAsync(String siapath, String newsiapath, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renterRenameSiapathPostValidateBeforeCall(siapath, newsiapath, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for renterStreamSiapathGet
     * @param siapath  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renterStreamSiapathGetCall(String siapath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/renter/stream/{siapath}"
            .replaceAll("\\{" + "siapath" + "\\}", apiClient.escapeString(siapath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renterStreamSiapathGetValidateBeforeCall(String siapath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siapath' is set
        if (siapath == null) {
            throw new ApiException("Missing the required parameter 'siapath' when calling renterStreamSiapathGet(Async)");
        }
        

        com.squareup.okhttp.Call call = renterStreamSiapathGetCall(siapath, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * downloads a file using http streaming. This call blocks until the data is received. The streaming endpoint also uses caching internally to prevent siad from redownloading the same chunk multiple times when only parts of a file are requested at once. This might lead to a substantial increase in ram usage and therefore it is not recommended to stream multiple files in parallel at the moment. This restriction will be removed together with the caching once partial downloads are supported in the future.      
     * @param siapath  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void renterStreamSiapathGet(String siapath) throws ApiException {
        renterStreamSiapathGetWithHttpInfo(siapath);
    }

    /**
     * 
     * downloads a file using http streaming. This call blocks until the data is received. The streaming endpoint also uses caching internally to prevent siad from redownloading the same chunk multiple times when only parts of a file are requested at once. This might lead to a substantial increase in ram usage and therefore it is not recommended to stream multiple files in parallel at the moment. This restriction will be removed together with the caching once partial downloads are supported in the future.      
     * @param siapath  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> renterStreamSiapathGetWithHttpInfo(String siapath) throws ApiException {
        com.squareup.okhttp.Call call = renterStreamSiapathGetValidateBeforeCall(siapath, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * downloads a file using http streaming. This call blocks until the data is received. The streaming endpoint also uses caching internally to prevent siad from redownloading the same chunk multiple times when only parts of a file are requested at once. This might lead to a substantial increase in ram usage and therefore it is not recommended to stream multiple files in parallel at the moment. This restriction will be removed together with the caching once partial downloads are supported in the future.      
     * @param siapath  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call renterStreamSiapathGetAsync(String siapath, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renterStreamSiapathGetValidateBeforeCall(siapath, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for renterUploadSiapathPost
     * @param siapath Location where the file will reside in the renter on the network. The path must be non-empty, may not include any path traversal strings (\&quot;./\&quot;, \&quot;../\&quot;), and may not begin with a forward-slash character. (required)
     * @param source Location on disk of the file being uploaded. (required)
     * @param datapieces The number of data pieces to use when erasure coding the file. (optional)
     * @param paritypieces The number of parity pieces to use when erasure coding the file. Total redundancy of the file is (datapieces+paritypieces)/datapieces. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renterUploadSiapathPostCall(String siapath, String source, Long datapieces, Long paritypieces, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/renter/upload/{siapath}"
            .replaceAll("\\{" + "siapath" + "\\}", apiClient.escapeString(siapath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (datapieces != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("datapieces", datapieces));
        if (paritypieces != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("paritypieces", paritypieces));
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renterUploadSiapathPostValidateBeforeCall(String siapath, String source, Long datapieces, Long paritypieces, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'siapath' is set
        if (siapath == null) {
            throw new ApiException("Missing the required parameter 'siapath' when calling renterUploadSiapathPost(Async)");
        }
        
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling renterUploadSiapathPost(Async)");
        }
        

        com.squareup.okhttp.Call call = renterUploadSiapathPostCall(siapath, source, datapieces, paritypieces, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * uploads a file to the network from the local filesystem.
     * @param siapath Location where the file will reside in the renter on the network. The path must be non-empty, may not include any path traversal strings (\&quot;./\&quot;, \&quot;../\&quot;), and may not begin with a forward-slash character. (required)
     * @param source Location on disk of the file being uploaded. (required)
     * @param datapieces The number of data pieces to use when erasure coding the file. (optional)
     * @param paritypieces The number of parity pieces to use when erasure coding the file. Total redundancy of the file is (datapieces+paritypieces)/datapieces. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void renterUploadSiapathPost(String siapath, String source, Long datapieces, Long paritypieces) throws ApiException {
        renterUploadSiapathPostWithHttpInfo(siapath, source, datapieces, paritypieces);
    }

    /**
     * 
     * uploads a file to the network from the local filesystem.
     * @param siapath Location where the file will reside in the renter on the network. The path must be non-empty, may not include any path traversal strings (\&quot;./\&quot;, \&quot;../\&quot;), and may not begin with a forward-slash character. (required)
     * @param source Location on disk of the file being uploaded. (required)
     * @param datapieces The number of data pieces to use when erasure coding the file. (optional)
     * @param paritypieces The number of parity pieces to use when erasure coding the file. Total redundancy of the file is (datapieces+paritypieces)/datapieces. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> renterUploadSiapathPostWithHttpInfo(String siapath, String source, Long datapieces, Long paritypieces) throws ApiException {
        com.squareup.okhttp.Call call = renterUploadSiapathPostValidateBeforeCall(siapath, source, datapieces, paritypieces, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * uploads a file to the network from the local filesystem.
     * @param siapath Location where the file will reside in the renter on the network. The path must be non-empty, may not include any path traversal strings (\&quot;./\&quot;, \&quot;../\&quot;), and may not begin with a forward-slash character. (required)
     * @param source Location on disk of the file being uploaded. (required)
     * @param datapieces The number of data pieces to use when erasure coding the file. (optional)
     * @param paritypieces The number of parity pieces to use when erasure coding the file. Total redundancy of the file is (datapieces+paritypieces)/datapieces. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call renterUploadSiapathPostAsync(String siapath, String source, Long datapieces, Long paritypieces, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renterUploadSiapathPostValidateBeforeCall(siapath, source, datapieces, paritypieces, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
