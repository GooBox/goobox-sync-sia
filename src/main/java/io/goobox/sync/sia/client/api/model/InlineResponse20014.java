/*
 * Sia
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.goobox.sync.sia.client.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * InlineResponse20014
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-12T09:40:06.745-04:00")
public class InlineResponse20014 {
  @SerializedName("encrypted")
  private Boolean encrypted = null;

  @SerializedName("unlocked")
  private Boolean unlocked = null;

  @SerializedName("rescanning")
  private Boolean rescanning = null;

  @SerializedName("confirmedsiacoinbalance")
  private String confirmedsiacoinbalance = null;

  @SerializedName("unconfirmedoutgoingsiacoins")
  private String unconfirmedoutgoingsiacoins = null;

  @SerializedName("unconfirmedincomingsiacoins")
  private String unconfirmedincomingsiacoins = null;

  @SerializedName("siafundbalance")
  private String siafundbalance = null;

  @SerializedName("siacoinclaimbalance")
  private String siacoinclaimbalance = null;

  @SerializedName("dustthreshold")
  private String dustthreshold = null;

  public InlineResponse20014 encrypted(Boolean encrypted) {
    this.encrypted = encrypted;
    return this;
  }

   /**
   * Indicates whether the wallet has been encrypted or not. If the wallet has not been encrypted, then no data has been generated at all, and the first time the wallet is unlocked, the password given will be used as the password for encrypting all of the data. &#39;encrypted&#39; will only be set to false if the wallet has never been unlocked before (the unlocked wallet is still encryped - but the encryption key is in memory).
   * @return encrypted
  **/
  @ApiModelProperty(example = "true", value = "Indicates whether the wallet has been encrypted or not. If the wallet has not been encrypted, then no data has been generated at all, and the first time the wallet is unlocked, the password given will be used as the password for encrypting all of the data. 'encrypted' will only be set to false if the wallet has never been unlocked before (the unlocked wallet is still encryped - but the encryption key is in memory).")
  public Boolean isEncrypted() {
    return encrypted;
  }

  public void setEncrypted(Boolean encrypted) {
    this.encrypted = encrypted;
  }

  public InlineResponse20014 unlocked(Boolean unlocked) {
    this.unlocked = unlocked;
    return this;
  }

   /**
   * Indicates whether the wallet is currently locked or unlocked. Some calls become unavailable when the wallet is locked.
   * @return unlocked
  **/
  @ApiModelProperty(example = "true", value = "Indicates whether the wallet is currently locked or unlocked. Some calls become unavailable when the wallet is locked.")
  public Boolean isUnlocked() {
    return unlocked;
  }

  public void setUnlocked(Boolean unlocked) {
    this.unlocked = unlocked;
  }

  public InlineResponse20014 rescanning(Boolean rescanning) {
    this.rescanning = rescanning;
    return this;
  }

   /**
   * Indicates whether the wallet is currently rescanning the blockchain. This will be true for the duration of calls to /unlock, /seeds, /init/seed, and /sweep/seed.
   * @return rescanning
  **/
  @ApiModelProperty(example = "false", value = "Indicates whether the wallet is currently rescanning the blockchain. This will be true for the duration of calls to /unlock, /seeds, /init/seed, and /sweep/seed.")
  public Boolean isRescanning() {
    return rescanning;
  }

  public void setRescanning(Boolean rescanning) {
    this.rescanning = rescanning;
  }

  public InlineResponse20014 confirmedsiacoinbalance(String confirmedsiacoinbalance) {
    this.confirmedsiacoinbalance = confirmedsiacoinbalance;
    return this;
  }

   /**
   * Number of siacoins, in hastings, available to the wallet as of the most recent block in the blockchain.
   * @return confirmedsiacoinbalance
  **/
  @ApiModelProperty(example = "123456", value = "Number of siacoins, in hastings, available to the wallet as of the most recent block in the blockchain.")
  public String getConfirmedsiacoinbalance() {
    return confirmedsiacoinbalance;
  }

  public void setConfirmedsiacoinbalance(String confirmedsiacoinbalance) {
    this.confirmedsiacoinbalance = confirmedsiacoinbalance;
  }

  public InlineResponse20014 unconfirmedoutgoingsiacoins(String unconfirmedoutgoingsiacoins) {
    this.unconfirmedoutgoingsiacoins = unconfirmedoutgoingsiacoins;
    return this;
  }

   /**
   * Number of siacoins, in hastings, that are leaving the wallet according to the set of unconfirmed transactions. Often this number appears inflated, because outputs are frequently larger than the number of coins being sent, and there is a refund. These coins are counted as outgoing, and the refund is counted as incoming. The difference in balance can be calculated using &#39;unconfirmedincomingsiacoins&#39; - &#39;unconfirmedoutgoingsiacoins&#39;  
   * @return unconfirmedoutgoingsiacoins
  **/
  @ApiModelProperty(example = "0", value = "Number of siacoins, in hastings, that are leaving the wallet according to the set of unconfirmed transactions. Often this number appears inflated, because outputs are frequently larger than the number of coins being sent, and there is a refund. These coins are counted as outgoing, and the refund is counted as incoming. The difference in balance can be calculated using 'unconfirmedincomingsiacoins' - 'unconfirmedoutgoingsiacoins'  ")
  public String getUnconfirmedoutgoingsiacoins() {
    return unconfirmedoutgoingsiacoins;
  }

  public void setUnconfirmedoutgoingsiacoins(String unconfirmedoutgoingsiacoins) {
    this.unconfirmedoutgoingsiacoins = unconfirmedoutgoingsiacoins;
  }

  public InlineResponse20014 unconfirmedincomingsiacoins(String unconfirmedincomingsiacoins) {
    this.unconfirmedincomingsiacoins = unconfirmedincomingsiacoins;
    return this;
  }

   /**
   * Number of siacoins, in hastings, are entering the wallet according to the set of unconfirmed transactions. This number is often inflated by outgoing siacoins, because outputs are frequently larger than the amount being sent. The refund will be included in the unconfirmed incoming siacoins balance.
   * @return unconfirmedincomingsiacoins
  **/
  @ApiModelProperty(example = "789", value = "Number of siacoins, in hastings, are entering the wallet according to the set of unconfirmed transactions. This number is often inflated by outgoing siacoins, because outputs are frequently larger than the amount being sent. The refund will be included in the unconfirmed incoming siacoins balance.")
  public String getUnconfirmedincomingsiacoins() {
    return unconfirmedincomingsiacoins;
  }

  public void setUnconfirmedincomingsiacoins(String unconfirmedincomingsiacoins) {
    this.unconfirmedincomingsiacoins = unconfirmedincomingsiacoins;
  }

  public InlineResponse20014 siafundbalance(String siafundbalance) {
    this.siafundbalance = siafundbalance;
    return this;
  }

   /**
   * Number of siafunds available to the wallet as of the most recent block in the blockchain.
   * @return siafundbalance
  **/
  @ApiModelProperty(example = "1", value = "Number of siafunds available to the wallet as of the most recent block in the blockchain.")
  public String getSiafundbalance() {
    return siafundbalance;
  }

  public void setSiafundbalance(String siafundbalance) {
    this.siafundbalance = siafundbalance;
  }

  public InlineResponse20014 siacoinclaimbalance(String siacoinclaimbalance) {
    this.siacoinclaimbalance = siacoinclaimbalance;
    return this;
  }

   /**
   * Number of siacoins, in hastings, that can be claimed from the siafunds as of the most recent block. Because the claim balance increases every time a file contract is created, it is possible that the balance will increase before any claim transaction is confirmed.
   * @return siacoinclaimbalance
  **/
  @ApiModelProperty(example = "9001", value = "Number of siacoins, in hastings, that can be claimed from the siafunds as of the most recent block. Because the claim balance increases every time a file contract is created, it is possible that the balance will increase before any claim transaction is confirmed.")
  public String getSiacoinclaimbalance() {
    return siacoinclaimbalance;
  }

  public void setSiacoinclaimbalance(String siacoinclaimbalance) {
    this.siacoinclaimbalance = siacoinclaimbalance;
  }

  public InlineResponse20014 dustthreshold(String dustthreshold) {
    this.dustthreshold = dustthreshold;
    return this;
  }

   /**
   * Number of siacoins, in hastings per byte, below which a transaction output cannot be used because the wallet considers it a dust output
   * @return dustthreshold
  **/
  @ApiModelProperty(example = "1234", value = "Number of siacoins, in hastings per byte, below which a transaction output cannot be used because the wallet considers it a dust output")
  public String getDustthreshold() {
    return dustthreshold;
  }

  public void setDustthreshold(String dustthreshold) {
    this.dustthreshold = dustthreshold;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20014 inlineResponse20014 = (InlineResponse20014) o;
    return Objects.equals(this.encrypted, inlineResponse20014.encrypted) &&
        Objects.equals(this.unlocked, inlineResponse20014.unlocked) &&
        Objects.equals(this.rescanning, inlineResponse20014.rescanning) &&
        Objects.equals(this.confirmedsiacoinbalance, inlineResponse20014.confirmedsiacoinbalance) &&
        Objects.equals(this.unconfirmedoutgoingsiacoins, inlineResponse20014.unconfirmedoutgoingsiacoins) &&
        Objects.equals(this.unconfirmedincomingsiacoins, inlineResponse20014.unconfirmedincomingsiacoins) &&
        Objects.equals(this.siafundbalance, inlineResponse20014.siafundbalance) &&
        Objects.equals(this.siacoinclaimbalance, inlineResponse20014.siacoinclaimbalance) &&
        Objects.equals(this.dustthreshold, inlineResponse20014.dustthreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encrypted, unlocked, rescanning, confirmedsiacoinbalance, unconfirmedoutgoingsiacoins, unconfirmedincomingsiacoins, siafundbalance, siacoinclaimbalance, dustthreshold);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20014 {\n");
    
    sb.append("    encrypted: ").append(toIndentedString(encrypted)).append("\n");
    sb.append("    unlocked: ").append(toIndentedString(unlocked)).append("\n");
    sb.append("    rescanning: ").append(toIndentedString(rescanning)).append("\n");
    sb.append("    confirmedsiacoinbalance: ").append(toIndentedString(confirmedsiacoinbalance)).append("\n");
    sb.append("    unconfirmedoutgoingsiacoins: ").append(toIndentedString(unconfirmedoutgoingsiacoins)).append("\n");
    sb.append("    unconfirmedincomingsiacoins: ").append(toIndentedString(unconfirmedincomingsiacoins)).append("\n");
    sb.append("    siafundbalance: ").append(toIndentedString(siafundbalance)).append("\n");
    sb.append("    siacoinclaimbalance: ").append(toIndentedString(siacoinclaimbalance)).append("\n");
    sb.append("    dustthreshold: ").append(toIndentedString(dustthreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

